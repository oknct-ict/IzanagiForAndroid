/* Generated By:JJTree&JavaCC: Do not edit this line. ExprParserConstants.java */
package tk.oknctict.izanagi.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExprParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int FUNC = 5;
  /** RegularExpression Id. */
  int ENDFUNC = 6;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int THEN = 8;
  /** RegularExpression Id. */
  int ELSEIF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int ENDIF = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int ENDWHILE = 13;
  /** RegularExpression Id. */
  int SELECT = 14;
  /** RegularExpression Id. */
  int COLON = 15;
  /** RegularExpression Id. */
  int CASE = 16;
  /** RegularExpression Id. */
  int CASEELSE = 17;
  /** RegularExpression Id. */
  int ENDSELECT = 18;
  /** RegularExpression Id. */
  int DIM = 19;
  /** RegularExpression Id. */
  int AS = 20;
  /** RegularExpression Id. */
  int PARTS = 21;
  /** RegularExpression Id. */
  int ON = 22;
  /** RegularExpression Id. */
  int RETURN = 23;
  /** RegularExpression Id. */
  int BREAK = 24;
  /** RegularExpression Id. */
  int CONTINUE = 25;
  /** RegularExpression Id. */
  int PRINT = 26;
  /** RegularExpression Id. */
  int TYPE = 27;
  /** RegularExpression Id. */
  int PLUS = 28;
  /** RegularExpression Id. */
  int MINUS = 29;
  /** RegularExpression Id. */
  int MUL = 30;
  /** RegularExpression Id. */
  int DIV = 31;
  /** RegularExpression Id. */
  int MOD = 32;
  /** RegularExpression Id. */
  int POWER = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int GE = 37;
  /** RegularExpression Id. */
  int LE = 38;
  /** RegularExpression Id. */
  int GT = 39;
  /** RegularExpression Id. */
  int LT = 40;
  /** RegularExpression Id. */
  int EQ = 41;
  /** RegularExpression Id. */
  int NEQ = 42;
  /** RegularExpression Id. */
  int BOOLAND = 43;
  /** RegularExpression Id. */
  int BOOLOR = 44;
  /** RegularExpression Id. */
  int ASSIGN = 45;
  /** RegularExpression Id. */
  int ADDASSIGN = 46;
  /** RegularExpression Id. */
  int SUBASSIGN = 47;
  /** RegularExpression Id. */
  int MULASSIGN = 48;
  /** RegularExpression Id. */
  int DIVASSIGN = 49;
  /** RegularExpression Id. */
  int MODASSIGN = 50;
  /** RegularExpression Id. */
  int POWASSIGN = 51;
  /** RegularExpression Id. */
  int LPAREN = 52;
  /** RegularExpression Id. */
  int RPAREN = 53;
  /** RegularExpression Id. */
  int LBRACKET = 54;
  /** RegularExpression Id. */
  int RBRACKET = 55;
  /** RegularExpression Id. */
  int LBLOCK = 56;
  /** RegularExpression Id. */
  int RBLOCK = 57;
  /** RegularExpression Id. */
  int COMMA = 58;
  /** RegularExpression Id. */
  int DOT = 59;
  /** RegularExpression Id. */
  int SEMICOLON = 60;
  /** RegularExpression Id. */
  int STR_START = 61;
  /** RegularExpression Id. */
  int INTEGER = 62;
  /** RegularExpression Id. */
  int FLOAT = 63;
  /** RegularExpression Id. */
  int IDENTIFIER = 64;
  /** RegularExpression Id. */
  int STR = 69;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_STR = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"Function\"",
    "\"End Function\"",
    "\"If\"",
    "\"Then\"",
    "\"ElseIf\"",
    "\"Else\"",
    "\"End If\"",
    "\"While\"",
    "\"End While\"",
    "\"Select\"",
    "\":\"",
    "\"Case\"",
    "\"Case Else\"",
    "\"End Select\"",
    "\"Dim\"",
    "\"as\"",
    "\"Parts\"",
    "\"on\"",
    "\"Return\"",
    "\"Break\"",
    "\"Continue\"",
    "\"Print\"",
    "<TYPE>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"And\"",
    "\"Or\"",
    "\"Not\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"^=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\".\"",
    "\";\"",
    "\"\\\"\"",
    "<INTEGER>",
    "<FLOAT>",
    "<IDENTIFIER>",
    "<token of kind 65>",
    "\"\\\\\\\"\"",
    "<token of kind 67>",
    "\"\\\\t\"",
    "\"\\\"\"",
  };

}
